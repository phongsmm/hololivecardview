{"version":3,"sources":["Holoplay.js","Tabs.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["Holoplay","props","state","tabs","width","height","x","y","onReady","bind","handleResize","this","event","e","id","target","parentNode","getAttribute","list","document","getElementById","removeChild","setState","size","console","log","opts","playerVars","autoplay","style","display","alignItems","justifyContent","border","background","borderRadius","default","spacing","onResize","direction","ref","delta","position","offsetWidth","offsetHeight","className","top","left","onClick","tabclose","videoId","url","onPlay","React","Component","Tabs","date","Date","Time","setInterval","sendDate","toISOString","substring","clearInterval","toLocaleTimeString","Menu","holostate","stringdate","countdata","count","axios","get","then","res1","res2","prevState","data","lives","map","hololive","i","start_at","split","push","length","backgroundColor","marginTop","marginBottom","marginLeft","color","href","App","_isMounted","dateString","c_Tabshanddle","key","room","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b14edbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Rnd} from \"react-rnd\";\r\nimport YouTube from 'react-youtube';\r\n\r\n\r\n\r\n\r\n\r\nclass Holoplay extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tabs :{ width: 300,\r\n                height: 300,\r\n                x: 200,\r\n                y: -300} ,\r\n         }\r\n\r\n        this.onReady = this.onReady.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(props,state){\r\n        if(this.state!==state){\r\n            return true;\r\n        }return false;\r\n    }\r\n\r\n\r\n\r\n    onReady(event){\r\n  }\r\n  onPlay(e){\r\n      \r\n  }\r\n\r\n\r\n  tabclose(e){\r\n      var id = e.target.parentNode.parentNode.getAttribute(\"id\");\r\n    var list = document.getElementById(id);\r\n        list.parentNode.removeChild(list);\r\n    \r\n  }\r\n\r\n  handleResize(e){\r\n      this.setState({tabs:{width :e.target.size}});\r\n      console.log(e.size);\r\n  }\r\n\r\n\r\nrender(){\r\n    \r\nconst style = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    border: \"solid 2px #ddd\",\r\n    background: \"white\",\r\n    borderRadius: \"20px\",\r\n  };\r\n  \r\n\r\n    const opts = {\r\n        height: this.state.tabs.height-30,\r\n        width: this.state.tabs.width-30,\r\n        playerVars: {\r\n          autoplay: 0,\r\n        },\r\n      };\r\n\r\n    return (\r\n\r\n     <div>\r\n\r\n    <div id=\"board\">\r\n\r\n            \r\n  <div id={\"tab\"+this.props.id}>\r\n     \r\n<Rnd style={style}\r\n    default={{width:this.state.tabs.width , height:this.state.tabs.height ,x:this.state.tabs.x+this.props.spacing,y:this.state.tabs.y-150}}\r\n\r\n    onResize={(e, direction, ref, delta, position) => {\r\n        \r\n        this.setState({\r\n          tabs:{width: ref.offsetWidth,\r\n          height: ref.offsetHeight},\r\n          ...position,\r\n        });\r\n      } }\r\n        \r\n\r\n  >\r\n      \r\n\r\n      <button className=\"ui red button\" style={{top:\"-10px\",left:\"-5px\" , position:\"absolute\"}} onClick={this.tabclose}> Close</button>\r\n\r\n\r\n<div> \r\n        <YouTube  videoId={this.props.url} opts={opts} onReady={this.onReady} onPlay={this.onPlay}/>\r\n\r\n      </div>\r\n    \r\n    \r\n  </Rnd>\r\n\r\n\r\n</div>\r\n\r\n           \r\n\r\n  \r\n  \r\n\r\n \r\n  </div> \r\n\r\n        </div>\r\n\r\n);\r\n\r\n}\r\n}\r\n\r\nexport default Holoplay;\r\n","import React  from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass Tabs extends React.Component {\r\n\r\n\r\nconstructor(){\r\n  super();\r\n  this.state = {\r\n    date : new Date()\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n\r\n  const Time = setInterval(() => {\r\n        this.setState({date:new Date()})\r\n        this.props.sendDate(`${this.state.date.toISOString().substring(0,10)}`);\r\n    },1000);\r\n\r\n    return()=>clearInterval(Time);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  render(){\r\n   \r\n  return (\r\n    <div >\r\n        \r\n        <h1> Times : <span> {this.state.date.toLocaleTimeString()} </span> </h1>\r\n\r\n      </div>\r\n\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default Tabs;\r\n","import React  from 'react';\r\nimport axios from'axios'\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n\r\nclass Menu extends React.Component {\r\n\r\n    \r\n\r\nconstructor(props){\r\n  super(props);\r\n  this.state = {\r\n      holostate:[],\r\n      date:new Date(),\r\n      stringdate :\"\",\r\n      countdata:0\r\n  }\r\n  this.count = this.count.bind(this)\r\n\r\n}\r\n\r\nasync componentDidMount(){\r\n\r\n \r\n  axios.get('https://holo.dev/api/v1/lives/scheduled').then(res1=>{\r\n    axios.get('https://holo.dev/api/v1/lives/current').then(res2=>{\r\n \r\n  this.setState(prevState=>({holostate:[...res1.data.lives,...res2.data.lives]}))\r\n\r\n\r\n})\r\n\r\n   })\r\n  \r\n    this.setState({stringdate:`${this.state.date.toISOString().substring(0,10)}`});\r\n\r\n\r\n\r\n\r\n}\r\n\r\nshouldComponentUpdate(props,state){\r\n  if(this.state!==state){\r\n    return true;\r\n  }return false;\r\n\r\n}\r\n\r\ncount(){\r\n\r\n  \r\n    var countdata =[];\r\n    this.state.holostate.map((hololive,i)=>{\r\n        if(hololive.start_at.split(\"T\")[0] === this.state.stringdate)  \r\n        {return countdata.push(hololive) }  \r\n         return 0;\r\n    });\r\n\r\n    return countdata.length;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render(){\r\n\r\n    \r\n\r\n    this.count();\r\n    console.log();\r\n\r\n  return (\r\n    <div>\r\n        <div>\r\n            <div className=\"ui secondary menu\" style={{backgroundColor:\"#f1f3f8\"}}> \r\n        <div>\r\n\r\n        <button className=\"ui red button\" style={{marginTop:\"5px\",marginBottom:\"5px\",marginLeft:\"8px\"}}>\r\n  <i className={\"ui play icon \"} style={{color:\"#fcdab7\"}}></i> Today Lives <div className=\"ui label\"> {this.count()}\r\n</div> </button>\r\n  \r\n   \r\n  <a style={{position:\"absolute\",left:\"2px\",top:\"50px\"}} href=\"https://holo.dev/api/v1/lives/scheduled\" className=\"ui blue image label\">fecth<div className=\"detail\">https://holo.dev/api/v1/lives/scheduled</div></a>\r\n \r\n        \r\n          </div>  </div> </div>\r\n\r\n\r\n      </div>\r\n\r\n  );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Menu;\r\n","import React  from 'react';\nimport './App.css';\nimport axios from'axios'\nimport Holoplay from './Holoplay';\nimport Tabs from './Tabs';\nimport Menu from './Menu';\n\nimport 'semantic-ui-css/semantic.min.css'\n\n\nclass App extends React.Component {\n\n  _isMounted = false;\n\nconstructor(){\n  super();\n  this.state = {\n    dateString: \"\",\n    hololive:[],\n\n  }\n\n  this.c_Tabshanddle = this.c_Tabshanddle.bind(this);\n}\n\n componentDidMount(){\n\n   axios.get('https://holo.dev/api/v1/lives/scheduled').then(res1=>{\n    axios.get('https://holo.dev/api/v1/lives/current').then(res2=>{\n \n  this.setState(prevState=>({hololive:[...res1.data.lives,...res2.data.lives]}))\n\n\n})\n\n   })\n  \n\n\n\n\n\n\n\n}\n\n\n\ncomponentWillUnmount(){\n\n  this._isMounted = false;\n\n}\n\nshouldComponentUpdate(props,state){\n  if(this.state !== state){\n    return true;\n  }return false;\n\n}\n\n\nc_Tabshanddle(e){\n  this.setState({dateString:e});\n\n}\n\n\n\n\n\n  render(){\n\n  return (\n    <div className=\"App\">\n      <Menu/> \n      <header className=\"App-header\">\n\n      <Tabs sendDate={this.c_Tabshanddle}/>\n      <h1> This Day : {this.state.dateString}</h1>\n      </header>\n      \n\n      {this.state.hololive.map((hololive,i)=>{\n       \n         if(hololive.start_at.split(\"T\")[0] === this.state.dateString)   {\n\n    \n          return <Holoplay key={\"player/\"+i} url={hololive.room} id={i} spacing={i*10}/>\n         } return \"\";\n            \n         \n      })}\n\n      </div>\n\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}