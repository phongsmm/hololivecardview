{"version":3,"sources":["Menu.js","Layout.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","state","holostate","date","Date","stringdate","countdata","count","bind","axios","get","then","res1","res2","setState","prevState","data","lives","this","toISOString","substring","map","hololive","i","start_at","split","push","length","console","log","style","flex","backgroundColor","className","marginTop","marginBottom","marginLeft","color","position","left","top","zIndex","href","React","Component","ResponsiveReactGridLayout","WidthProvider","Responsive","GirdLayout","currentBreakpoint","mounted","dateString","todaylive","items","onBreakpointChange","onCompactTypeChange","onLayoutChange","filter","live","Log","l","concat","toString","x","y","w","h","room","id","_isMounted","breakpoint","cols","oldCompactType","compactType","layout","_","el","key","data-grid","justifyContent","justifyItems","url","controls","width","height","right","cursor","onClick","onRemoveItem","reject","layouts","measureBeforeMount","useCSSTransforms","preventCollision","createElement","defaultProps","rowHeight","lg","md","sm","xs","xxs","initialLayout","generateLayout","App","contentDiv","document","getElementById","gridProps","window","ReactDOM","render","Boolean","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec2a037a.chunk.js","sourcesContent":["import React  from 'react';\r\nimport axios from'axios'\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n\r\nclass Menu extends React.Component {\r\n\r\n    \r\n\r\nconstructor(props){\r\n  super(props);\r\n  this.state = {\r\n      holostate:[],\r\n      date:new Date(),\r\n      stringdate :\"\",\r\n      countdata:0\r\n  }\r\n  this.count = this.count.bind(this)\r\n\r\n}\r\n\r\nasync componentDidMount(){\r\n\r\n \r\n  axios.get('https://holo.dev/api/v1/lives/scheduled').then(res1=>{\r\n    axios.get('https://holo.dev/api/v1/lives/current').then(res2=>{\r\n \r\n  this.setState(prevState=>({holostate:[...res1.data.lives,...res2.data.lives]}))\r\n\r\n\r\n})\r\n\r\n   })\r\n  \r\n    this.setState({stringdate:`${this.state.date.toISOString().substring(0,10)}`});\r\n\r\n\r\n\r\n\r\n}\r\n\r\nshouldComponentUpdate(props,state){\r\n  if(this.state!==state){\r\n    return true;\r\n  }return false;\r\n\r\n}\r\n\r\ncount(){\r\n\r\n  \r\n    var countdata =[];\r\n    this.state.holostate.map((hololive,i)=>{\r\n        if(hololive.start_at.split(\"T\")[0] === this.state.stringdate)  \r\n        {return countdata.push(hololive) }  \r\n         return 0;\r\n    });\r\n\r\n    return countdata.length;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render(){\r\n\r\n    \r\n\r\n    this.count();\r\n    console.log();\r\n\r\n  return (\r\n    <div style={{flex:1,backgroundColor:'transparent'}}>\r\n        <div>\r\n            <div className=\"ui secondary menu\" style={{backgroundColor:\"#f1f3f8\"}}> \r\n        <div>\r\n\r\n        <button className=\"ui red button\" style={{marginTop:\"5px\",marginBottom:\"5px\",marginLeft:\"8px\"}}>\r\n  <i className={\"ui play icon \"} style={{color:\"#fcdab7\"}}></i> Today Lives <div className=\"ui label\"> {this.count()}\r\n</div> </button>\r\n  \r\n   \r\n  <a style={{position:\"absolute\",left:\"2px\",top:\"50px\",zIndex:1}} href=\"https://holo.dev/api/v1/lives/scheduled\" className=\"ui blue image label\">fecth<div className=\"detail\">https://holo.dev/api/v1/lives/scheduled</div></a>\r\n \r\n\r\n          </div>  </div> </div>\r\n          \r\n\r\n      </div>\r\n\r\n  );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport PropTypes, { func } from \"prop-types\";\r\nimport axios from'axios'\r\nimport _, { functions } from \"lodash\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport ReactPlayer  from 'react-player/youtube';\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\nexport default class GirdLayout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentBreakpoint: \"lg\",\r\n      mounted: false,\r\n      dateString: \"\",\r\n      hololive: [],\r\n      todaylive:[],\r\n      date:new Date(),\r\n      items: []\r\n\r\n      }\r\n    \r\n\r\n    this.onBreakpointChange = this.onBreakpointChange.bind(this);\r\n    this.onCompactTypeChange = this.onCompactTypeChange.bind(this);\r\n    this.onLayoutChange = this.onLayoutChange.bind(this);\r\n  }\r\n\r\n\r\n  \r\n\r\n  async componentDidMount() {\r\n\r\n    this.setState({ mounted: true });\r\n    const res1 = await axios.get('https://holo.dev/api/v1/lives/scheduled')\r\n    const res2 = await axios.get('https://holo.dev/api/v1/lives/current')\r\n    await this.setState(()=>({hololive:[...res1.data.lives,...res2.data.lives]}))\r\n    await this.setState({dateString:`${this.state.date.toISOString().substring(0,10)}`})\r\n    const Log  = await this.state.hololive.filter(live=>\r\n      live.start_at.split(\"T\")[0] === this.state.dateString\r\n    )\r\n    await  console.log(this.state.hololive)\r\n\r\n\r\n     this.setState({todaylive:Log})\r\n     this.state.todaylive.map(((l,i)=>{\r\n       this.setState({items:this.state.items.concat({\r\n          i: i.toString(),\r\n          x: i * 2,\r\n          y: 0,\r\n          w: 2,\r\n          h: 2,\r\n          room: l.room,\r\n          id:l.id\r\n       })})\r\n     }))\r\n\r\n\r\n\r\n  \r\n  }\r\n  \r\n  componentWillUnmount(){\r\n  \r\n    this._isMounted = false;\r\n  \r\n  }\r\n\r\n  \r\nshouldComponentUpdate(props,state){\r\n  if(this.state !== state){\r\n    return true;\r\n  }return false;\r\n\r\n}\r\n\r\n\r\n/* { <div key={i} id={i}>\r\n      <Holoplay id={hololive.id} url={hololive.room} width={300} height={100}/>\r\n    </div> } */\r\n\r\n\r\n\r\n  onBreakpointChange(breakpoint,cols) {\r\n    this.setState({\r\n      currentBreakpoint: breakpoint ,\r\n      cols:cols\r\n    });\r\n  }\r\n\r\n  onCompactTypeChange() {\r\n    const { compactType: oldCompactType } = this.state;\r\n    const compactType =\r\n      oldCompactType === \"horizontal\"\r\n        ? \"vertical\"\r\n        : oldCompactType === \"vertical\"\r\n          ? null\r\n          : \"horizontal\";\r\n    this.setState({ compactType });\r\n  }\r\n\r\n  onLayoutChange(layout) {\r\n    this.props.onLayoutChange(layout);\r\n\r\n    this.setState({ items: _.map(layout,(l,i)=>{\r\n        return {\r\n          i: l.i,\r\n          x: l.x,\r\n          y: l.y,\r\n          w: l.w,\r\n          h: l.h,\r\n          id:this.state.todaylive[i].id,\r\n          room:this.state.todaylive[i].room\r\n  \r\n        }\r\n    })});\r\n  }\r\n\r\n\r\n\r\n  createElement(el) {\r\n    const removeStyle = {\r\n      position: \"absolute\",\r\n      right: \"2px\",\r\n      top: 0,\r\n      cursor: \"pointer\",\r\n      color:'white'\r\n    };\r\n    const i =  el.i;\r\n    return (\r\n      <div key={i} data-grid={el} style={{justifyContent:'center',justifyItems:'center'}}>\r\n        <ReactPlayer url={`https://www.youtube.com/watch?v=${el.room}`} controls={true} width='100%'\r\n          height='95%'/>\r\n        <span\r\n          className=\"remove\"\r\n          style={removeStyle}\r\n          onClick={this.onRemoveItem.bind(this, i)}\r\n        >\r\n          x\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  onRemoveItem(i) {\r\n    console.log(\"removing\", i);\r\n    this.setState({ items: _.reject(this.state.items, { i: i }) });\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div style={{flex:1,backgroundColor:'transparent'}}>\r\n        <ResponsiveReactGridLayout\r\n          {...this.props}\r\n          layouts={this.state.layouts}\r\n          onBreakpointChange={this.onBreakpointChange}\r\n          onLayoutChange={this.onLayoutChange}\r\n          measureBeforeMount={false}\r\n          useCSSTransforms={this.state.mounted}\r\n          compactType={this.state.compactType}\r\n          preventCollision={!this.state.compactType}\r\n        >\r\n        {_.map(this.state.items, el => this.createElement(el))}\r\n        </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGirdLayout.propTypes = {\r\n  onLayoutChange: PropTypes.func.isRequired\r\n};\r\n\r\nGirdLayout.defaultProps = {\r\n  className: \"layout\",\r\n  rowHeight: 30,\r\n  onLayoutChange: function() {},\r\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\r\n  initialLayout: GirdLayout.generateLayout\r\n};\r\n\r\n","import React  from 'react';\nimport _ from 'lodash'\nimport Menu from './Menu';\nimport 'semantic-ui-css/semantic.min.css';\nimport ReactDOM from \"react-dom\";\nimport './App.css';\nimport GirdLayout from './Layout'\n\n\n\n\n\nclass App extends React.Component {\n\n  \n\n  _isMounted = false;\n  \n\nconstructor(){\n  super();\n  this.state = {\n    layout: [] \n  }\n  this.onLayoutChange = this.onLayoutChange.bind(this);\n\n}\n\nonLayoutChange(layout) {\n  this.setState({ layout: layout });\n}\n\n async componentDidMount(){\n\n  this.setState({ mounted: true });\n\n  \n}\n\ncomponentWillUnmount(){\n\n  this._isMounted = false;\n\n}\n\n\n\n\n\n  render(){\n    \n\n  return (\n\n    \n    \n    \n    <div className=\"App\" style={{flex:1 , backgroundColor:'transparent'}}>\n\n      \n      <Menu/> \n\n\n\n<div>\n        <GirdLayout onLayoutChange={this.onLayoutChange} />\n      </div>\n\n\n\n      </div>\n\n\n\n    \n  );\n}\n}\n\n\nconst contentDiv = document.getElementById(\"root\");\nconst gridProps = window.gridProps || {};\nReactDOM.render(React.createElement(GirdLayout, gridProps), contentDiv);\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}